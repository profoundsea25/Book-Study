package study.modern_java_in_action.part4.chapter14;

/**
 * Chapter 14. 자바 모듈 시스템
 */

public class Chapter14 {

    /**
     * 14.1 압력 : 소프트웨어 유추
     */

    /* 14.1.1 관심사 분리
        - "추론하기 쉬운 소프트웨어"를 만드는 것이 목표
            - 즉, 아키텍쳐 수준(고수준)에서는 기반 코드를 바꿔야 할 때 유추하기 쉽다.
        - 관심사분리(SoC, Separation of concerns)는 프로그램을 고유의 기능으로 나누는 동작을 권장하는 원칙이다.
            - 서로 거의 겹치지 않는 코드 그룹으로 분리한다.
            - 패키지가 클래스를 그룹으로 나누는 것 이상으로 자바 9 모듈은 클래스가 어떤 다른 클래스를 볼 수 있는지를
              컴파일 시간에 정교하게 제어할 수 있다.
                - 자바 패키지는 모듈성을 지원하지 않는다.
        - SoC 원칙의 장점
            - 개별 기능을 따로 작업할 수 있으므로 팀이 쉽게 협업할 수 있다.
            - 개별 부분을 재사용하기 쉽다.
            - 전체 시스템을 쉽게 유지보수할 수 있다.
     */

    /* 14.1.2 정보 은닉
        - 정보 은닉은 세부 구현을 숨기도록 장려하는 원칙이다.
            - 소프트웨어를 개발할 때 요구사항은 자주 바뀐다. 세부 구현을 숨김으로 프로그램의 어떤 부분을 바꿨을 때
              다른 부분까지 영향을 미칠 가능성을 줄일 수 있다.
            - 즉 코드를 관리하고 보호하는 데 유용한 원칙이다.
        - 캡슐화(encapsulation)
            - 특정 코드 조각이 애플리케이션의 다른 부분과 고립되어 있음을 의미
            - 캡슐화된 코드의 내부적인 변화가 의도치 않게 외부에 영향을 미칠 가능성이 줄어든다.
            - 자바에서는 `private` 키워드를 통해 컴파일러를 이용해 캡슐화를 확인할 수 있다.
        - 하지만 자바 9 이전까지는 클래스와 패키지가 의도된 대로 공개되었는지를 컴파일러로 확인할 수 있는 기능이 없었다.
     */

    /* 14.1.3 자바 소프트웨어
        - 잘 설계된 소프트웨어를 만들려면, 두 가지 원칙(관심사의 분리, 정보 은닉)을 따르는 것이 필수다.

     */
}
