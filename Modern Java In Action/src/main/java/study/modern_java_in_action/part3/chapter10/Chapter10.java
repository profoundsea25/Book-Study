package study.modern_java_in_action.part3.chapter10;

/**
 * Chapter 10. 람다를 이용한 도메인 전용 언어
 */

/* 도메인 전용 언어(DSL)
    - 언어의 주요 목표 : 메시지를 명확하고, 안정적인 방식으로 전달하는 것
        - "프로그램은 사람들이 이해할 수 있도록 작성되어야 하는 것이 중요하며 기기가 실행하는 부분은 부찾겅니 뿐"
        - 무엇보다 의도가 명확하게 전달되어야 한다.
    - 애플리케이션의 핵심 비즈니스를 모델링하는 소프트웨어 영역에서 읽기 쉽고, 이해하기 쉬운 코드는 특히 중요하다.
        - 개발팀과 도메인 전문가가 공유하고 이해할 수 있는 코드는 생산성과 직결되기 때문이다.
        - 도메인 전용 언어(DSL)로 애플리케이션의 비즈니스 로직을 표현함으로 이 문제를 해결할 수 있다.
    - DSL = 특정 도메인을 대상으로 만들어진 특수 프로그래밍 언어
        - 도메인의 많은 특성 용어를 사용
            - maven, ant 등 = 빌드 과정을 표현하는 DSL
            - HTML = 웹페이지의 구조를 정의하도록 특화된 언어
        - 람다를 통해 자바 또한 코드가 간결해지면서 DSL 역할이 가능해지고 있다.
        - 플루언트 스타일(fluent style)은 쉽게 DSL 에 적용할 수 있다.
            - 스트림 API 의 특성인 메서드 체인을 보통 자바의 루프의 복잡한 제어와 비교해 유창함을 의미하는 용어
        - 기본적으로 DSL 을 만들려면 애플리케이션 수준 프로그래머에 어떤 동작이 필요하며 이들을 어떻게 프로그래머에게 제공하는지 고민이 필요하다.
            - 동시에 시스템 수준의 개념으로 인해 불필요한 오염이 발생하지 않도록 해야한다.
        - 내부적 DSL 에서는 유창하게 코드를 구현할 수 있도록 적절하게 클래스와 메서드를 노출하는 과정이 필요하다.
        - 외부 DSL 은 DSL 문법 뿐 아니라 DSL 을 평가하는 파서(parser)도 구현해야 한다.
 */

public class Chapter10 {

    /**
     * 10.1 도메인 전용 언어
     */

    /* DSL
        - DSL은 특정 비즈니스 도메인의 문제를 해결하려고 만든 언어다.
            - 특정 비즈니스 도메인을 인터페이스로 만든 API 라고 생각할 수 있다.
        - DSL은 범용 프로그래밍 언어가 아니다.
            - DSL에서 동작과 용어는 특정 도메인에 국한되므로 다른 문제는 걱정할 필요가 없다.
            - 오직 자신 앞에 높인 문제를 어떻게 해결할지에만 집중할 수 있다.
            - DSL을 이용하면 사용자가 특정 도메인의 복잡성을 더 잘 다룰 수 있다.
            - 저수준 구현 세부 사항 메서드는 클래스의 비공개로 만들어서 저수준 구현 세부 내용은 숨길 수 있다.
            - 그렇게 하면 사용자 친화적인 DSL을 만들 수 있다.
        - DSL을 개발할 때 염두할 점
            - 의사소통의 왕
                - 우리의 코드의 의도가 명확히 전달되어야 한다.
                - 프로그래머가 아닌 사람도 이해할 수 있어야 한다.
                - 코드가 비즈니스 요구사항에 부합하는지 확인할 수 있다.
            - 한 번 코드를 구현하지만 여러 번 읽는다.
                - 가독성은 유지보수의 핵심이다.
                - 항상 우리의 동료가 쉽게 이해할 수 있도록 코드를 구현해야 한다.
     */

    /* 10.1.1 DSL의 장점과 단점
        - DSL의 장점
            - 간결함 : 비즈니스 로직을 간편하게 캡슐화, 반복을 피하고 코드를 간결하게 만든다.
            - 가독성 : 비 도메인 전문가도 코드를 쉽게 이해할 수 있다.
            - 유지보수
            - 높은 수준의 추상화 : DSL은 도메인과 같은 추상화 수준에서 동작하므로 도메인의 문제와 직접적으로 관련되지 않은 세부 사항은 숨긴다.
            - 집중 : 프로그래머가 특정 코드에 집중할 수 있다.
            - 관심사 분리 : 애플리케이션의 인프라구조와 관련된 문제와 독립적으로 비즈니스 관련된 코드에서 집중하기가 용이하다.
        - DSL의 단점
            - DSL 설계의 어려움
            - 개발 비용 : 코드에 DSL을 추가하는 작업은 초기 프로젝트에 많은 비용과 시간이 소모된다.
            - 추가 우회 계층 : 계층을 최대한 작게 만들어 성능 문제를 회피해야 한다.
            - 새로 배워야 하는 언어 : 개별 DSL이 독립적으로 진화할 수 있기 때문
            - 호스팅 언어 한계 : 장황한 프로그래밍 언어를 기반으로 만든 DSL은 성가신 문법의 제약을 받고 읽기 어려워진다. (그래서 람다가 강력한 도구가 된다.)
     */

    /* 10.1.2 JVM에서 이용할 수 있는 다른 DSL 해결책
        - DSL의 카테고리
            - 내부 DSL (= 임베디드 DSL)
                - 순수 자바 코드 같은 기존 호스팅 언어를 기반으로 구현
            - 외부 DSL (= 스탠드어론)
                - 호스팅 언어와는 독립적으로 자체의 문법을 가짐
            - 다중 DSL
                - 외부 DSL과 내부 DSL의 중간 카테고리에 해당하는 DSL
                - ex. 스칼라, 그루비 등 자바가 아니지만 JVM에서 실행되며 더 유연하고 표현력이 강한 언어
        - 내부 DSL
            - (자바 기준) 자바로 구현한 DSL
     */
}
