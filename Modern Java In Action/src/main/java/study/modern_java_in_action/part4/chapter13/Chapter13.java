package study.modern_java_in_action.part4.chapter13;

/**
 * Chapter 13. 디폴트 메서드
 */

/* 기존 인터페이스의 문제점
    - 인터페이스에 새로운 메서드를 추가하는 등 인터페이스를 바꾸고 싶을 때 문제가 발생
        - 이전에 해당 인터페이스를 구현했던 모든 클래스의 구현도 고쳐야 하기 때문
    - 이 문제를 해결하는 새로운 기능
        - 정적 메서드 (static method)
        - 디폴트 메서드 (default method)
    - 즉, 자바 8에서는 메서드 구현을 포함하는 인터페이스를 정의할 수 있다.
        - 결과적으로 기존 인터페이스를 구현하는 클래스는 자동으로 인터페이스에 추가된 새로운 메서드의 디폴트 메서드를 상속받게 된다.
        - 기존의 코드 구현을 바꾸도록 강요하지 않으면서 인터페이스 변경 가능
    - `default` 키워드
    - 디폴트 메서드는 주로 라이브러리 설계자들이 사용한다.
        - 자바 API의 호환성을 유지하면서 라이브러리를 바꿀 수 있다.
    - 디폴트 메서드를 통해 다중 상속을 달성할 수도 있다.
    - 정적 메서드
        - 인터페이스에 직접 정적 메서드를 선언할 수 있으므로 유틸리티 클래스를 없앨 수 있다.
 */

public class Chapter13 {

    /**
     * 13.1 변화하는 API
     */

    /* 13.1.1 API 버전 1

     */

    /* 13.1.1 API 버전 2
        - 인터페이스를 고치면 발생하는 문제점
            - 인터페이스에 메서드를 추가하면 해당 인터페이스를 구현하는 모든 클래스는 추가된 메서드를 구현해야 한다.
                - 인터페이스에 새로운 메서드를 추가하면 바이너리 호환성은 유지된다.
                    - 바이너리 호환성이란 새로 추가된 메서드를 호출하지 않으면 새로운 메서드 구현이 없이도
                      기존 클래스 파일 구현이 잘 작동한다는 의미다.
            - 인터페이스를 고치면 전체 애플리케이션을 재빌드할 때 컴파일 에러가 발생한다.
                - 공개된 API를 고치면 기존 버전과의 호환성 문제가 발생
        - 이 모든 문제를 디폴트 메서드로 해결할 수 있다.
            - 새롭게 바뀐 인터페이스에서 자동으로 기본 구현을 제공하므로 기존 코드를 고치지 않아도 된다.
     */

    /* 호환성
        - 바이너리 호환성
            - 뭔가를 바꾼 이후에도 에러 없이 기존 바이너리가 실행될 수 있는 상황
        - 소스 호환성
            - 코드를 고쳐도 기존 프로그램을 성공적으로 재컴파일할 수 있음을 의미
        - 동작 호환성
            - 코드를 바꾼 다음에도 같은 입력값이 주어지면 프로그램이 같은 동작을 실행한다는 의미
     */


    /**
     * 13.2 디폴트 메서드란 무엇인가?
     */

    /* 디폴트 메서드
        - 호환성을 유지하면서 API를 변경할 수 있다.
        - 인터페이스를 자신을 구현하는 클래스에서 메서드를 구현하지 않을 수 있는 새로운 메서드 시그지처를 제공
        - 인터페이스 자체에서 기본으로 구현을 제공
        - `default` 키워드를 포함하며, 메서드 바디를 포함한다.
     */

    /* 추상 클래스와 인터페이스
        - 공통점 : 추상 메서드와 바디를 포함하는 메서드를 정의할 수 있다.
        - 차이점
            - 클래스는 하나의 추상 클래스만 상속받을 수 있지만 인터페이스는 여러 개 구현할 수 있다.
            - 추상 클래스는 인스턴스 변수(필드)로 공통 상태를 가질 수 있다. 인터페이스는 인스턴스 변수를 가질 수 없다.
     */


    /**
     * 13.3 디폴트 메서드 활용 패턴
     */


}
